#!/bin/bash
#cd /var/www/html

HOST=$(hostname)
APP_NAME="tt-rss"

# TT-RSS Config
TTRSS_DIRNAME="$APP_NAME"
TTRSS_FULLPATH="$(pwd)/$TTRSS_DIRNAME"
DEFAULT_CONF="$TTRSS_DIRNAME/config.php-dist"
CONF="$TTRSS_DIRNAME/config.php"
THEMES_DIR="/var/lib/tt-rss/themes"

# Nginx Config
NGINX_CFG_DIR="/external/nginx_conf"
NGINX_CFG_FILE="${NGINX_CFG_DIR}/${HOST}.conf"

# SQL DB Config
SQL_INIT_DIR="/external/initdb"
SQL_INIT_FILE="$SQL_INIT_DIR/tt-rss.sql"

# URLs config
LOCAL_PROTOCOL="http"
LOCAL_DOMAIN="$HOST"
LOCAL_PORT="80"
LOCAL_URI="$APP_NAME"

install_ttrss() {
	if [[ -d "$TTRSS_DIRNAME" ]]; then
		printf "\n[INSTALL] tt-rss already installed." "$TTRSS_TAG"
		# TODO : think about updating ?
		return 0
	else
		if mv "/ttrss_${TTRSS_TAG}" "$TTRSS_DIRNAME" ; then
			printf "\n[INSTALL] Using default tt-rss version (%s)." "$TTRSS_TAG"
		else
			printf "\n[INSTALL] Downloading tt-rss version %s." "$TTRSS_TAG"
			# rm default install
			rm -rf "/ttrss_*"
			git clone -b "$TTRSS_TAG" "$TTRSS_REPO" "$TTRSS_DIRNAME"
		fi
		if [[ -f "$DEFAULT_CONF" ]] ; then
			chown -R www-data:www-data "$TTRSS_DIRNAME"
			printf "\n[INSTALL] TT-RSS.$TAG is installed in %s" "$(pwd)/$TTRSS_DIRNAME"
			return 0
		fi
		return 1
	fi	
}

set_var() {
	[[ ! -f "$CONF" ]] && echo "[CONFIG]  tt-rss config file not found ($CONF)." && return 1
	[[ $# -ne 2 ]] && echo "usage: $0 <\"variable_name\"> <\"value\">" && return 2
	echo "[CONFIG]  define $1=$2"
	sed -ri.bak "s|^(\s*define\('$1',\s*)(['\"]{1}).*(['\"]{1}\);)(.*)$|\1\2$2\3\4|;" "$CONF"
}

set_other_vars() {
	# $1 must be in the form : var_name=value ezvsnv; [var_name=value ezvsnv; ]...
	# no space around '=' and one space after ';'
	[[ $# -ne 1 ]] && return 1
	[[ -z $1 ]] && echo "[CONFIG] no custom variables provided for tt-rss." && return 0
	
	other_vars=$(echo "$1" | sed 's|;$||' | awk '{ n=split($0, a, "; "); for (i = 1; i <= n; ++i ) print a[i] }' )
	while read var; do
		if [[ "$var" =~ ([0-9a-zA-Z_-]+)=(.*) ]]; then
			#printf "  %s : %s\n" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
			set_var "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" || return 1
		else
			printf "  %s is not a valid property definition!\n" 		"$var"
			printf "  Check docker environment variables! (%s)\n" "$other_vars"
			return 1
		fi
	done <<<"$other_vars"
}

config_ttrss() {
	[[ -f "$CONF" ]] && echo "[CONFIG]  tt-rss is already configured." && return 0

	if [[ "$SELF_URL_PATH" =~ ^(http|https)://([^:\/]*)(:([0-9]+))?(/(.*))?$ ]]; then
		EXT_PROTOCOL="${BASH_REMATCH[1]}" 
		EXT_DOMAIN="${BASH_REMATCH[2]}"
		EXT_PORT="${BASH_REMATCH[4]}"
		EXT_URI="${BASH_REMATCH[6]}"
		printf "\nSELF_URL %s is valid : \n" "$SELF_URL_PATH"
		printf "  Protocol : %s " "$EXT_PROTOCOL" 
		if [[ "$EXT_PROTOCOL" = "http" ]] ; then printf "\n" ; else printf "(you need an external http server with ssl support) \n"; fi
		printf "  Domain   : %s \n" "$EXT_DOMAIN"
		printf "  Port     : %s \n" "$EXT_PORT"
		printf "  Uri      : %s \n" "$EXT_URI"
	else
		echo "Provided SELF_URL_PATH is not valid.( http[s]://my.domain.xyz[:custom_port][/custom_uri] )"
		exit 1
	fi
#				 "s|^(\s*define\('$1',\s*)(['\"]{1}).*(['\"]{1}\);)$|\1\2$2\3);|;"
	echo "[CONFIG]  TT-RSS configuration will be defined in $CONF (from $DEFAULT_CONF)"
	sed -r "s|^(\s*define\('DB_TYPE',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$DB_TYPE\3|;
					s|^(\s*define\('DB_NAME',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$DB_NAME\3|;
					s|^(\s*define\('DB_HOST',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$DB_HOST\3|;
					s|^(\s*define\('DB_PORT',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$DB_PORT\3|;
					s|^(\s*define\('DB_USER',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$DB_USER\3|;
					s|^(\s*define\('DB_PASS',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$DB_PASS\3|;
					s|^(\s*define\('PHP_EXECUTABLE',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$(which php)\3|;
					s|^(\s*define\('SELF_URL_PATH',\s*)(['\"]{1}).*(['\"]{1}\);).*$|\1\2$SELF_URL_PATH\3|;" "$DEFAULT_CONF" > "$CONF"
	set_other_vars "$TTRSS_OPTS" || return 1
	[[ -f "$CONF" ]]
}

write_sql_init() {
	if [[ ! -f "$SQL_INIT_FILE" ]]; then
		cat > "$SQL_INIT_FILE" <<-EOF
		--create user
		CREATE USER $DB_USER WITH LOGIN PASSWORD '$DB_PASS';
		--or update its password
		ALTER USER $DB_USER WITH PASSWORD '$DB_PASS';
		--change password validity period
		ALTER USER $DB_USER VALID UNTIL 'infinity';
		--create database
		CREATE DATABASE $DB_NAME OWNER $DB_USER; 
		--ENCODING 'UTF8' LC_COLLATE='fr_FR.UTF8' LC_CTYPE='fr_FR.UTF8' TEMPLATE template0;
		GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
		
		EOF
		if [[ ! -f "$SQL_INIT_FILE" ]] ; then
			printf "\The file %s has not been written (unknown error)!" "$SQL_INIT_FILE"
			return 2
		fi
	else
		printf "\nThe init file %s already exists!\n" "$SQL_INIT_FILE"
		return 1
	fi
}

init_schema() {
	if ! php /init_schema.php "$TTRSS_FULLPATH" ; then
		printf "\nError during schema initialization!\n"
		return 1
	fi
	printf "\nDatabase initialized with tt-rss schema.\n"
}

install_themes() {
	if [[ ! -d "${THEMES_DIR}/clean-greader" ]]; then
		git clone "https://github.com/naeramarth7/clean-greader" "${THEMES_DIR}/clean-greader"
	else
		(cd "${THEMES_DIR}/clean-greader" && git fetch)
	fi
	cp -Ru ${THEMES_DIR}/clean-greader/* "${TTRSS_FULLPATH}/themes/"
	
	if [[ ! -d "${THEMES_DIR}/feedly" ]]; then
		git clone "https://github.com/levito/tt-rss-feedly-theme" "${THEMES_DIR}/feedly"
	else
		(cd "${THEMES_DIR}/feedly" && git fetch)
	fi
	cp -Ru ${THEMES_DIR}/feedly/* "${TTRSS_FULLPATH}/themes/"
	
	if [[ ! -d "${THEMES_DIR}/reeder" ]]; then
			git clone "https://github.com/tschinz/tt-rss_reeder_theme" "${THEMES_DIR}/reeder"
		else
			(cd "${THEMES_DIR}/reeder" && git fetch)
	fi
	cp -Ru ${THEMES_DIR}/reeder/* "${TTRSS_FULLPATH}/themes/"

	chown -R root:www-data "${TTRSS_FULLPATH}/themes"
	chmod -R 755 "${TTRSS_FULLPATH}/themes"
	printf "\nInstalled themes : \n" 
	ls ${TTRSS_FULLPATH}/themes/*.css
}

write_nginx_proxyconf() {
	setProxyConf "tt-rss" "$NGINX_CFG_FILE" "$LOCAL_PROTOCOL://$LOCAL_DOMAIN:$LOCAL_PORT/$LOCAL_URI" "$SELF_URL_PATH"
}

test_tcp_postgres() {
	timeout 1 bash -c "cat < /dev/null > /dev/tcp/$DB_HOST/$DB_PORT" &>/dev/null
	echo "$?"
}

postgres_status() {
	[[ $1 =~ ^[0-9]{1,1}$ ]] && STEP=$1 || STEP=2
	printf "\nTCP TEST for Postgres Host (3x step=%i) :" "$STEP"
	local res1=$(test_tcp_postgres) && printf "%i_" "$res1" && sleep $STEP
	local res2=$(test_tcp_postgres)	&& printf "%i_" "$res2" && sleep $STEP
	local res3=$(test_tcp_postgres)	&& printf "%i "	"$res3"
	
	if [[ $res1 -eq 0 && $res2 -eq 0 && $res3 -eq 0 ]] ; then
		printf "Postgres UP!\n" && return 0
	else
		if [[ $res1 -eq 1 && $res2 -eq 1 && $res3 -eq 1 ]]; then
			printf "Postgres DOWN!\n" && return 1
		else
			printf "Postgres is starting/stopping!\n" && return 2
		fi
	fi
}

wait_postgres() {
	[[ $1 =~ ^[0-9]{1,3}$ ]] && DB_TIMEOUT=$1 || DB_TIMEOUT=30
	local start=$(date +%s)
	printf "\nWaiting for Postgres instance(timeout=%i)..." "$DB_TIMEOUT"
	while ! postgres_status 2 ; do
		sleep 1
		local tstamp=$(date +%s)
		if [[ $(( tstamp - start )) -gt $DB_TIMEOUT ]]; then
			printf "Can't connect to postgres instance(>%ss)\n" "$DB_TIMEOUT"
			exit 1
		fi
	done
	printf "\nPostgres UP!\n"
	init_schema
	return 0
}

main() {
	case $1 in
		tt-rss )
			printf "\nInstall & Configure tt-rss + themes + plugins ...\n"
			install_ttrss && config_ttrss && install_themes || exit 1
			if [[ -d "$NGINX_CFG_DIR" && "$EXT_PROTOCOL" = "https" ]]; then
				printf "\nWrite Nginx proxy configuration in %s (%s)...\n" "$NGINX_CFG_FILE" "$EXT_PROTOCOL"
				write_nginx_proxyconf || exit 3
			else
				printf "\nNginx not needed(%s). No proxy configuration will be written." "$EXT_PROTOCOL"
			fi
			printf "\nWait for postgres and start...\n"
			wait_postgres 60 && apache2-foreground
			;;
		initsql )
			printf "\nRunning with 'initsql' command : \n"
			printf "\nThis will create a sql script for database initialization in the volume binded to %s.\n" "$SQL_INIT_DIR"
			if [[ -d "$SQL_INIT_DIR" ]]; then
				write_sql_init || exit 2
			else
				printf "\nERROR : The directory %s doesn't exist!\n" "$SQL_INIT_DIR"
				exit 1
			fi
			;;
		help)
			printf "\nUse one of the following commands : \n \
			 				\"initsql\" -> write sql scripts for postgres initialization and stop \n \
			 				\"tt-rss\"  -> run tt-rss"
			exit 0
			;;
		* )
			exec "$@"
			;;
	esac
}

main "$@"

#    tt-rss OPTS
# ENABLE_REGISTRATION false
# REG_NOTIFY_ADDRESS changeme
# REG_MAX_USERS 10
# MYSQL_CHARSET 'UTF8'
# FEED_CRYPT_KEY ''
# SINGLE_USER_MODE false
# SIMPLE_UPDATE_MODE false
# LOCK_DIRECTORY 'lock'
# CACHE_DIR 'cache'
# ICONS_DIR "feed-icons"
# ICONS_URL "feed-icons"
# AUTH_AUTO_CREATE true
# AUTH_AUTO_LOGIN true
# FORCE_ARTICLE_PURGE 0
# PUBSUBHUBBUB_HUB ''
# PUBSUBHUBBUB_ENABLED false
# SPHINX_SERVER 'localhost:9312'
# SPHINX_INDEX 'ttrss, delta'
# SESSION_COOKIE_LIFETIME 86400
# SMTP_FROM_NAME 'Tiny Tiny RSS'
# SMTP_FROM_ADDRESS 'noreply@your.domain.dom'
# DIGEST_SUBJECT '[tt-rss] New headlines for last 24 hours'
# SMTP_SERVER ''
# SMTP_LOGIN ''
# SMTP_PASSWORD ''
# SMTP_SECURE ''
# CHECK_FOR_UPDATES true
# ENABLE_GZIP_OUTPUT false
# PLUGINS 'auth_internal, note'
# LOG_DESTINATION 'sql'